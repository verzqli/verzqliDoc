#### 题目:[287. 寻找重复数](https://leetcode-cn.com/problems/find-the-duplicate-number/)

> 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。
>
> **说明：**
>
> 1. **不能**更改原数组（假设数组是只读的）。
> 2. 只能使用额外的 *O*(1) 的空间。
> 3. 时间复杂度小于 *O*(*n*2) 。
> 4. 数组中只有一个重复的数字，但它可能不止重复出现一次。

#### 示例

```java
输入: [1,3,4,2,2]
输出: 2
```

```java
输入: [3,1,3,4,2]
输出: 3
```

| 难度 | 初见 | 复习1次 | 复习2次 | 复习3次 | 复习4次 |
| :--: | :--: | :-----: | :-----: | :-----: | :-----: |
| 中等 |  ✖   |         |         |         |         |

#### 分析

​	这题想了排序然后再查找的算法，但是不允许更改数组，所以也没有头绪。最后还是面向[题解](https://leetcode-cn.com/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/)编程。

​	总共有三种方法：快慢指针

- 快慢指针

  我们先设置慢指针 $low$ 和快指针 $fast$ ，慢指针每次走一步，快指针每次走两步，根据「Floyd 判圈算法」两个指针在有环的情况下一定会相遇，此时我们再将$slow$ 放置起点 0，两个指针每次同时移动一步，相遇的点就是答案

  这里简单解释为什么后面将$low$ 放置起点后移动相遇的点就一定是答案了。假设环长为$L$,从起点到环的入口的步数是 $ a$，从环的入口继续走 $b$ 步到达相遇位置，从相遇位置继续走 $c$步回到环的入口，则有$b+c=L$,其中$L,a,b,c$都是正整数，根据上述定义，慢指针走了$a+b$步，快指针走了$2(a+b)$步。

  从另一个角度，在相遇位置，快指针比满指针多走了若干圈，因此快指针走的步数还可以表示成$a+b+kL$,联立等式，可以得到：
  $$
  2(a+b)=a+b+kL
  $$
  解得：$a=kL-b$，整理可得
  $$
  a=(k-1)L+(L-b)=(k-1)L+c
  $$
  从上述等式可知，如果慢指针从起点出发，快指针从相遇位置（b点）出发，每次两个指针都移动一步，则慢指针走了 $a$ 步之后到达环的入口，快指针在环里走了 $ k-1$  圈之后又走了$  c$  步。

  

  汇合后把满指针从b点移到0点，此时快指针在$b$点,从上面公式可以知道，满指针第二次走了$a$步时，快指针走了$(k-1)L+c$步，又因为快指针此时再$b$点且$b+c=L$,所以他们一定会在$a$点，也就是环的入口相遇。

  注意，第二次就不需要$fast$走两步了，而是一步就行了。

  ```java
   public int findDuplicate(int[] nums) {
        int fast = nums[nums[0]], slow = nums[0];
          while (slow!=fast) {
              slow = nums[slow];
              fast = nums[nums[fast]];
          }
          slow=0;
       //注意，第二次快指针就不是走两步了。
          while (slow!=fast) {
              slow = nums[slow];
              fast = nums[fast];
          }
          return fast;
      }
  ```

  #### 复杂度

  - 时间复杂度:$O(N)$
  - 空间复杂度:$O(1)$

- 二进制方法

  题目中可知这是一个n+1的数组且数字范围就只有1~n，所以我们可知这里有两种情况，

  - 包含了数字1~n和一个重复的数字
  - 包含了数字1~n中的k个，和n-k+1个重复数字，类似于用重复数字去替换了原本存在的数字

  我们可知[1,n]这些数每个进制中1的个数，然后和目前数组各个进制1的个数进行比对，因为重复的数字会改变某位进制为1的总数，所以最后可以知道哪几位发生了变化，然后得出重复的数

  |       |  1   |  2   |  3   |  4   |  2   |  x   |  y   |
  | :---: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |
  | 第0位 |  1   |  0   |  1   |  0   |  0   |  2   |  2   |
  | 第1位 |  0   |  1   |  1   |  0   |  1   |  3   |  2   |
  | 第2位 |  0   |  0   |  0   |  1   |  0   |  1   |  1   |

  从上面这个例子可以看到，第1位的1的进制数多了1，所以还原后就是重复的数为2。

  证明过程：

  - 当数组中包含的数字为1~n和一个重复数字时，我们可以很明显的得到，变化的位就是这个重复的数引起的，从上面这个例子中可以轻易的得到答案。
  - 当数组中包含的数字为1~n中的K个和n-k+1个重复数字时，如果重复数字target出现了3次以上时，必然有一些数字不存在数组中，我们可以看做是target替代了这些数字。下面是替代的四种情况。
    - 如果被替换的数第i为为1，且target第i为也为1，那么x不变，满足x>y
    - 如果被替换的数第i为为0，且target第i为也为1，那么x+1，满足x>y
    - 如果被替换的数第i为为1，且target第i为也为0，那么x-1，满足x<=y
    - 如果被替换的数第i为为0，且target第i为也为0，那么x不变，满足x<=y

  也就是说如果target第i位为1，那么每次替换后只会使x不变或变大，如果为0，只会使x不变或者变小，始终满足**【x>y时，target第i位为1，否则为0】**

  ```java
   public int findDuplicate2(int[] nums) {
          int length = nums.length;
          int result = 0, maxBit = 32;
          while ((length) >> maxBit == 0) {
              maxBit--;
          }
          for (int i = 0; i < maxBit; i++) {
              int x = 0,y=0;
              //计算1~n所有数每个进位的和和当前数组没个进位的和，然后作对比
              for (int j = 0; j < length; j++) {
                  if ((nums[j]&(1<<i))!=0){
                      x++;
                  }
                  if (j>0&&(j&(1<<i))!=0){
                      y++;
                  }
              }
              if (x>y){
                  result|= (1<<i);
              }
          }
          return result;
      }
  ```

  

- #### 复杂度

  - 时间复杂度:$O(N*logN)$,N为数组长度，每次判断数组内的数进位都需要遍历一遍N，logN表示的是N的进位数，也就是二进制的位数个数，也就是代码中的i。
  - 空间复杂度:$O(1)$