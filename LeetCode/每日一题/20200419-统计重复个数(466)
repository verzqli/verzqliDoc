#### 题目

>由 n 个连接的字符串 s 组成字符串 S，记作 S = [s,n]。例如，["abc",3]=“abcabcabc”。
>
>如果我们可以从 s2 中删除某些字符使其变为 s1，则称字符串 s1 可以从字符串 s2 获得。例如，根据义，"abc" 可以从 “abdbec” 获得，但不能从 “acbbe” 获得。
>
>现在给你两个非空字符串 s1 和 s2（每个最多 100 个字符长）和两个整数 0 ≤ n1 ≤ 10^6 0 ≤ n2 ≤ 10^6。现考虑字符串 S1 和 S2，其中 S1=[s1,n1] 、S2=[s2,n2] 。
>
>请你找出一个可以满足使[S2,M] 从 S1 获得的最大整数 M 。
>链接：https://leetcode-cn.com/problems/count-the-repetitions

#### 示例

```java
输入：
s1 ="acb",n1 = 4
s2 ="ab",n2 = 2

返回：
2
```
##### 先读懂题目
关于字符串 A 从 B 获得 ：

>如果我们可以从字符串 B 中删除某些字符使其变为 A，则称字符串 A 可以从字符串 B 获得。
例如，根据定义，"abc" 可以从 “abdbec” 获得，但不能从 “acbbe” 获得。

关于字符串的生成规则（Repeat）：

>将 n 个字符串 s 连接在一起组成字符串 R，记作R = [s,n]。
例如，R ["abc",3]=“abcabcabc”。

最后是题目要求：

>现在给你两个非空字符串 Sa 和 Sb（每个最多 100 个字符长）和两个整数 0 ≤ Na ≤ 10⁶ 和 1 ≤ Nb ≤ 10⁶。
现在考虑字符串 Ra 和 Rb，其中 Ra=[Sa,Na] 、Rb=[Sb,Nb] 。
现在我们希望构造一个字符串 Rc=[Rb, M] ，同时又要保证 Rc 能够从 Ra 获得。
请你找出 M 最大取值是多少 。

以题目样例来说：

>Ra = ["acb", 4] ，其实就是 Sa = "acb", Ra = "acbacbacbacb", Na = 4；
>而 Rb = ["ab", 2]，其实就是 Sb = "ab", Rb = "abab", Nb = 2；
>Rb 重复 M 次后，仍然能够 从 Ra 中获得，求 M 的最大取值。
>可以看到 "abab" 最多重复 2 次，超过就无法从 "acbacbacbacb" 中获得了。
>
>这样拆分重组之后，应该能比之前容易读懂一点了。

#### 分析

本题一头雾水，完全不知道该怎么入手，看了题解的大概思路后大概了解了原理，其实最开始想到了类似的原理，但是有个问题没解决。

最开始的想法是遍历多个Ra，然后看得到一个完整的Rb需要n个Ra，然后用整数除以这个n就是答案，但是这样当时解决不了一个问题，例如3个Ra中包含了一个Rb，但是比如第三个Ra（假如Ra长度为50）在第3个点就完成了对一个Rb的循环，那么后面47个点是否包含了Ra的起始点。

这样起始点就变了，不是从Ra从头开始，而是从Ra的第四个开始遍历了，这样得到一个Rb需要的Ra可能是变化的了，所以想了一段时间后放弃了这个想法。

![](图库/20200419.png)



在看了[官方的题解后](https://leetcode-cn.com/problems/count-the-repetitions/solution/tong-ji-zhong-fu-ge-shu-by-leetcode-solution/)发现和我前面的想法大部分类似，只不过解决了我没解决的那个问题。

- 首先，遍历一个Ra，在这个Ra遍历到最后，遍历到Rb的第N个下表（如果N为0，那么可以判断，Ra中不存在Rb）
- 获得这个N后，继续对RaRaRaRa循环遍历，直到在遍历第M个Ra后又出现了Rb的N下标
- 第一第二步我们可以看到遍历到了两次Rb的 N下标，那么可以肯定Rb是出现循环了一次了，而且又因为第一步我们可以知道在遍历Rb中出现Rb的N下标字符是最后一次，后面不会在出现Rb中的字符。
- 假如在第一个Ra遍历到N下标后  后面花费了三个Ra才又出现了Rb的N下标，那么可以知道3个Ra会出现一个Rb，这种解法等于是解决我想法中Rb遍历完多余的字符是否会存在Ra字符的问题
- 这种想法是找到循环的结束点，保证到达这个点后后续如果要重新开始寻找循环节就必须要重开一个Ra，从上图中可以看出，第二个adc其实是等于第一个adc挪到后面来，循环节bdadc其实还是Rb adcbd。
- 还有种ababa 和ab这种循环，就是1个Ra中就包含了多个Rb的循环，所以还需要保留出现Ra循环的次数，方便后面计算。

有些读者可能会怀疑循环节是否一定存在，这里我们给出的答案是肯定的，根据[鸽笼原理](https://baike.baidu.com/item/鸽笼)，我们最多只要找过 `|s2| + 1`个 `s1`，就一定会出现循环节。

```java
class Solution {
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        if(n1==0) return 0;
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        int l1 = s1.length();
        int l2 = s2.length();
        int couts1=0;s//经历多少s1
        int couts2=0;//经历多少s2
        int p=0;//当前在s2的位置
        Map<Integer,int[]> mp = new HashMap<>();//记录每一次s1扫描结束后当前的状态，寻找循环
        while(couts1<n1){
            for(int i=0;i<l1;i++){
                if(c1[i]==c2[p]){//往前
                    p++;
                    if(p==l2){//s2扫描结束从头开始循环
                        p=0;
                        couts2++;
                    }
                }
            }
            couts1++;
            if(!mp.containsKey(p)){
                mp.put(p,new int[]{couts1,couts2});//记录当前状态
                
            }
            else{//出现了循环 这次结束后p的位置和以前某一次一样，就是循环
                int[] last =mp.get(p);
                int circle1= couts1-last[0];
                int circle2= couts2-last[1];
                couts2 += circle2*((n1-couts1)/circle1);
                couts1 = couts1+((n1-couts1)/circle1)*circle1;//更新新他们
            }
        }
        return couts2/n2;
    }
}

couts2 += circle2*((n1-couts1)/circle1);
couts1 = couts1+((n1-couts1)/circle1)*circle1;
解释一下这两行代码什么意思：
我们进入这个代码快的前提是出现循环，
也就是说这一次扫描s1结束的时候，p的位置，也就是S2的位置和之前一次相同，现在我们算差值：
int circle1= couts1-last[0];表示两次位置经历的多少s1
int circle2= couts2-last[1];表示两次位置经历的多少s2
假如经历过三个s1和两个s2，那么可以表示：
三个s1可以换两个s2，这就是一个循环
也就是：
circle1=3
circle2=2
所以(n1-couts1)/circle1表示剩下的还有几个循环
((n1-couts1)/circle1)circle1表示 循环的个数每个循环有多少s2
couts1 = couts1+((n1-couts1)/circle1)circle1;表示很显然，加起来之前走过的s2
couts2 += circle2((n1-couts1)/circle1);表示加所有循环经历的s1

链接：https://leetcode-cn.com/problems/count-the-repetitions/solution/java-1msxiang-xi-zhu-shi-by-feixiang-4/
```



