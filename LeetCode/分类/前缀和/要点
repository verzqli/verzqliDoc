状态压缩＋哈希表。类似的题出现好几次了。 如1124。 状态压缩后，哈希表的用处是求最长的连续子串，满足子数组的和为k。 此题k为0， 1124题k为1.

1. 遇到奇偶个数校验，想到XOR
2. 遇到有限的参数（小于20个）表状态， 想到状态压缩 （bitmask）：用二进制来表示状态
3. 遇到求最长的连续子串使得和为k（maximum continuous subarray(substring) with sum equal to k）想到 前缀和 加哈希表记录第一次出现某一状态的位置。

## 一看到“子数组和”，有必要马上想到“前缀和”

### √ 复习，什么是“前缀和”？

- 前面的所有，再包括自己（数组 第 0 项 到 当前项 的 总和）

- 如果用一个数组 preSum 表示：

- preSum[0]：数组A 第 0 项 到 第 0 项 的总和

- preSum[1]：数组A 第 0 项 到 第 1 项 的总和

- preSum[2]：数组A 第 0 项 到 第 2 项 的总和

- preSum[3]：数组A 第 0 项 到 第 3 项 的总和

  用方程表示就是
  $$
  preSum[i]  =A[0]+A[1]+...+A[i]
  $$
  于是数组的某一段，也就是子数组[i,j]
  $$
  A[i]+...+A[j] = preSum[j]-preSum[i-1]
  $$
  注意这里的i-1,i是可以为0的，此时i-1就成了-1，所以我们可以让preSum[-1]=0.此时
  $$
  A[0]+A[1]+...+A[j] = preSum[j]
  $$
  这么做是为了让边界情况也能套用通式（通式也能成立）