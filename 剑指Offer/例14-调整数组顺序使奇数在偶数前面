#### 题目

> 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。

#### 分析

对于数字排列和重排序这种方法，可以多想想双指针方案是否可以。

设置头尾指针，头指针向后移动，找到一个偶数后与尾指针的奇数互换，然后两者各前进一步，最后当尾指针位置index小于头指针时则说明分拣完毕。

```java
 public int[] solve(int[] array) {
        if (array.length == 0) {
            return null;
        }
        if (array.length == 1) {
            return array;
        }
        int start = 0;
        int end = array.length - 1;
        while (start < end) {
            //前面这个start<end是为了防止全是偶数或者奇数导致的数组下标溢出，属于边界条件考虑
            while ((start < end) && (array[start] & 1) == 1) {
                start++;
            }
            while ((start < end) && (array[end] & 1) != 1) {
                end--;
            }
            if (start < end) {
                int temp = array[start];
                array[start] = array[end];
                array[end] = temp;
            }
        }
        return array;
    }
```

#### 扩展

我们可以把``array[start] & 1) == 1``这个条件抽出写成一个方法，这样如果是修改其他判断条件即可，例如将数组的负数和非负数分成两块。

```java
  while ((start < end) && judge(array,start)) {
         start++;
 }
  public boolean judge(int [] array ,int index){
    //  return array[start] & 1) == 1;
        return array<0;
  }
```



