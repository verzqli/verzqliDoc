#### 题目

> 输出一个斐波那契数列

这个题目很简单，但是一些优化问题需要注意，根据题目我们可以很快写出代码

```java
public void Fibonacci (int n){
 if (n<=0){
 	return 0;
 }
  if (n==1){
 	return 1;
 }
 return Fibonacci(n-1)+Fibonacci(n-2);
}
```

但是上述代码有一个严重的问题，那就是重复计算，比如计算f(10) 我们需要计算f(9)和f(8),但是计算f(9) 我们又需要计算f(8)和f(7),这时候发现了吗，我们计算了两次f(8)，越往下面，重复计算的次数就越多。而且这个重复计算次数是以指数增长的。

#### 优化方案

- 用hashmap表存储

  ​	每当计算出一个f(n)的值时就以<n,f(n)>存储到hashmap表中，在需要计算的时候先去表里查询该值有没有被计算，有的话直接拿出来用即可。

- 自下而上计算

  ​	更简单的办法是从下往上计算，首先根据f(O)和f(1)算出f(2),再根据f(1)和f(2)算出f.()...依比类推就可以算出第n项了。

```java
public void Fibonacci (int n){
 if (n<=0){
 	return 0;
 }
  if (n==1){
 	return 1;
 }
 int fibOne = 0;
 int fibTwo = 1;
 int fibN = 0;
 for(int i=2;i<n;i++){
	fibN=fibOne+fibTwo;
	fibTwo = fibOne;
	fibOne = fibN;
}
	return fibN;
}
```



- 公式

  这个方法不常用，用一个数学公式即可。
  $$
  \begin{bmatrix}
   f(n)&  f(n-1)\\ 
   f(n-1)& f(n-2) 
  \end{bmatrix}=\begin{bmatrix}
  1 & 1 \\ 
  1 & 0 
  \end{bmatrix}^{n-1}
  $$
  这个公式用数学归纳法不难证明，感兴趣的读者不妨自己证明一-下。有了这个公式，我们只需要求得矩阵
  $$
  \begin{bmatrix}
  1 & 1 \\ 
  1 & 0 
  \end{bmatrix}^{n-1}
  $$
  

  即可得到f(n),所以公式为
  $$
  a_{n} = \left\{\begin{matrix}
  a^{n/2}\cdot a^{n/2}  & n为偶数\\  
  a^{(n-1)/2}\cdot a^{(n-1)/2}\cdot a & n为奇数
  \end{matrix}\right.
  $$
  从上面的公式我们可以看出，我们想求得n次方,就要先求得n/2次方，从上面的公式我们可以看出，我们想求得n次方,就要先求得n/2次方，再把n/2次方的结果平方一下即可。这可以用递归的思路实现。